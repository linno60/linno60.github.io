{"version":3,"file":"static/js/321.e343d3b9.chunk.js","mappings":"oLAKaA,EAAY,SAACC,GACtB,IAAMC,GAAQC,EAAAA,EAAAA,QAAO,MAYrB,OAXAC,EAAAA,EAAAA,YAAU,WAQN,OAPAC,IAAAA,cAAqB,CACjBC,UAAWJ,EAAMK,QACjBC,SAAU,MACVC,MAAM,EACNC,UAAU,EACVT,cAAAA,IAEG,kBAAMI,IAAAA,UAEd,IACIH,I,6ECfES,EAAS,SAACC,GACnB,IAAMC,GAAMV,EAAAA,EAAAA,QAAO,MAEXW,GAAuBC,EAAAA,EAAAA,YAAWC,EAAAA,YAAlCF,mBAMR,OAJAV,EAAAA,EAAAA,YAAU,WACNU,EAAmBF,KACpB,CAACE,EAAoBF,IAEjBC,I,kJCVEI,EAAqB,WAS9B,OACI,SAAC,IAAD,CACIC,GAAG,cACHC,KAXc,SAACC,GACnBC,QAAQC,IAAIF,IAWRG,OARgB,SAACjB,GACrBe,QAAQC,IAAIhB,IAQRkB,QAAS,CACLC,SAAU,GACVC,WAAY,CACRC,MAAO,QAEXC,WAAY,CACRC,QAAQ,EACRC,QAAS,GAEbC,UAAW,CACPJ,MAAO,CAAEK,MAAO,CAAC,UAAW,YAC5BC,KAAM,CACFC,UAAW,OACXL,QAAQ,EACRM,SAAU,SACVC,QAAQ,EACRC,MAAO,GACPC,UAAU,GAEdC,OAAQ,CACJC,QAAS,CACLX,QAAQ,EACRY,KAAM,KAEVT,MAAO,KAEXU,QAAS,CACLV,MAAO,IAEXW,MAAO,CACHC,KAAM,QAEVC,KAAM,CACFb,MAAO,CAAEc,IAAK,GAAKC,IAAK,KACxBC,UAAW,CACPnB,QAAQ,EACRoB,aAAc,EACdZ,MAAO,IAEXD,OAAQ,CACJP,QAAQ,S,s+HCvDpC,GAAgB,KAAO,qBAAqB,SAAW,yBAAyB,UAAY,0BAA0B,aAAe,6BAA6B,SAAW,0BCiE7K,MAzDA,WACI,IAAMqB,GAAiBlD,EAAAA,EAAAA,GAAUmD,GAE3BC,GAAUzC,EAAAA,EAAAA,GAAO,QASjB0C,EClBc,SAACC,GAErB,IAAMD,GAAKlD,EAAAA,EAAAA,QAAO,MAEZoD,GAAQpD,EAAAA,EAAAA,QAAO,MAiBrB,OAfAC,EAAAA,EAAAA,YAAU,WACN,IAAMoB,EAAU,CACZ8B,QAAAA,EACAE,UAAW,GACXC,UAAW,GACXhD,MAAM,GAMV,OAFA8C,EAAMhD,QAAU,IAAImD,IAAJ,CAAUL,EAAG9C,QAASiB,GAE/B,WACH+B,EAAMhD,QAAQoD,aAEnB,CAACL,IACGD,EDHIO,CADK,CAAC,cAAe,wBAGhC,OACI,qBAAS/C,IAAKuC,EAASlC,GAAG,gBAAgB2C,UAAWC,EAAAA,KAArD,WACI,SAAC7C,EAAD,CAAoBC,GAAI4C,EAAAA,eACxB,gBAAKD,UAAWC,EAAAA,SAAhB,UACI,iBAAMD,UAAWC,EAAAA,UAAkBjD,IAAKwC,OAE5C,iBAAKQ,UAAWC,EAAAA,aAAhB,WACI,cACIC,KAAK,iDACL,aAAW,gBACXC,OAAO,SACPC,IAAI,aAJR,UAMI,SAAC,MAAD,CAAYJ,UAAU,OAAOhB,KAAM,QAGvC,cACIkB,KAAK,8BACL,aAAW,cACXC,OAAO,SACPC,IAAI,aAJR,UAMI,SAAC,MAAD,CAAUJ,UAAU,OAAOhB,KAAM,QAGrC,mBACIqB,QAAS,SAACC,GACNC,OAAOC,SAASN,KAAO,6BACvBI,EAAEG,kBAHV,UAMI,SAAC,MAAD,CAAQT,UAAU,OAAOhB,KAAM,WAIvC,mBACIgB,UAAWC,EAAAA,SACXI,QA9CU,WAClBK,SACKC,eAAe,kBACfC,eAAe,CAAEC,SAAU,YA4CxB7D,IAAKqC","sources":["hooks/useLottie.js","hooks/useNav.js","components/Particles.js","webpack://lin-portfolio/./src/sections/Home/styles.module.scss?7e02","sections/Home/Home.jsx","hooks/useTyped.js"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport lottie from 'lottie-web'\n\n\n\nexport const useLottie = (animationData) => {\n    const anime = useRef(null)\n    useEffect(() => {\n        lottie.loadAnimation({\n            container: anime.current,\n            renderer: 'svg',\n            loop: true,\n            autoplay: true,\n            animationData,\n        })\n        return () => lottie.stop()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    return anime\n}\n\n\n","import { useRef, useContext, useEffect } from 'react'\nimport { NavContext } from '../context/NavContext'\n\nexport const useNav = (navLinkId) => {\n    const ref = useRef(null)\n\n    const { setActiveNavLinkId } = useContext(NavContext)\n\n    useEffect(() => {\n        setActiveNavLinkId(navLinkId)\n    }, [setActiveNavLinkId, navLinkId])\n\n    return ref\n}","import React from 'react'\nimport Particles from \"react-tsparticles\";\nexport const ParticlesComponent = () => {\n    const particlesInit = (main) => {\n        console.log(main);\n    };\n\n    const particlesLoaded = (container) => {\n        console.log(container);\n    };\n\n    return (\n        <Particles\n            id=\"tsparticles\"\n            init={particlesInit}\n            loaded={particlesLoaded}\n            options={{\n                fpsLimit: 60,\n                background: {\n                    color: \"#fff\"\n                },\n                fullScreen: {\n                    enable: false,\n                    zIndex: -1\n                },\n                particles: {\n                    color: { value: [\"#e91f63\", \"#BFC2CB\"] },\n                    move: {\n                        direction: \"none\",\n                        enable: true,\n                        outModes: \"bounce\",\n                        random: false,\n                        speed: 0.7,\n                        straight: false\n                    },\n                    number: {\n                        density: {\n                            enable: true,\n                            area: 800\n                        },\n                        value: 300\n                    },\n                    opacity: {\n                        value: 0.6\n                    },\n                    shape: {\n                        type: \"star\"\n                    },\n                    size: {\n                        value: { min: 0.5, max: 3.5 },\n                        animation: {\n                            enable: true,\n                            minimumValue: 0,\n                            speed: 10\n                        },\n                        random: {\n                            enable: true\n                        }\n                    },\n                }\n            }}\n        />\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"home\":\"styles_home__X+YJM\",\"typedDiv\":\"styles_typedDiv__nSEn3\",\"homeTyped\":\"styles_homeTyped__IXL8W\",\"contactLinks\":\"styles_contactLinks__y2sKG\",\"arrowDiv\":\"styles_arrowDiv__VpaOQ\"};","import { useLottie } from '../../hooks/useLottie'\nimport { useNav } from '../../hooks/useNav'\nimport { useTyped } from '../../hooks/useTyped'\nimport { ParticlesComponent } from '../../components/Particles'\nimport { FaGithub, FaLinkedin } from 'react-icons/fa'\nimport { GrMail } from 'react-icons/gr'\nimport arrow from '../../assets/lotties/arrow.json'\nimport styles from './styles.module.scss'\n\nfunction Home() {\n    const arrowAnimation = useLottie(arrow)\n\n    const homeRef = useNav('Home')\n\n    const scrollToAbout = () => {\n        document\n            .getElementById('aboutContainer')\n            .scrollIntoView({ behavior: 'smooth' })\n    }\n\n    const strings = [\"Hi, I'm Lin\", 'A Software Engineer']\n    const el = useTyped(strings)\n\n    return (\n        <section ref={homeRef} id='homeContainer' className={styles.home}>\n            <ParticlesComponent id={styles.tsparticles} />\n            <div className={styles.typedDiv}>\n                <span className={styles.homeTyped} ref={el} />\n            </div>\n            <div className={styles.contactLinks}>\n                <a\n                    href='https://www.linkedin.com/in/lin-liu-224167145/'\n                    aria-label='linkedin link'\n                    target='_blank'\n                    rel='noreferrer'\n                >\n                    <FaLinkedin className='icon' size={42} />\n                </a>\n\n                <a\n                    href='https://github.com/linno60/'\n                    aria-label='github link'\n                    target='_blank'\n                    rel='noreferrer'\n                >\n                    <FaGithub className='icon' size={42} />\n                </a>\n\n                <button\n                    onClick={(e) => {\n                        window.location.href = 'mailto:liulinn60@gmail.com'\n                        e.preventDefault()\n                    }}\n                >\n                    <GrMail className='icon' size={42} />\n                </button>\n            </div>\n\n            <button\n                className={styles.arrowDiv}\n                onClick={scrollToAbout}\n                ref={arrowAnimation}\n            />\n        </section>\n    )\n}\nexport default Home\n","import { useRef, useEffect } from 'react'\nimport Typed from 'typed.js'\n\nexport const useTyped = (strings) => {\n    // Create reference to store the DOM element containing the animation\n    const el = useRef(null)\n    // Create reference to store the Typed instance itself\n    const typed = useRef(null)\n\n    useEffect(() => {\n        const options = {\n            strings,\n            typeSpeed: 40,\n            backSpeed: 30,\n            loop: true,\n        };\n\n        // elRef refers to the <span> rendered below\n        typed.current = new Typed(el.current, options)\n\n        return () => {\n            typed.current.destroy()\n        }\n    }, [strings])\n    return el\n}"],"names":["useLottie","animationData","anime","useRef","useEffect","lottie","container","current","renderer","loop","autoplay","useNav","navLinkId","ref","setActiveNavLinkId","useContext","NavContext","ParticlesComponent","id","init","main","console","log","loaded","options","fpsLimit","background","color","fullScreen","enable","zIndex","particles","value","move","direction","outModes","random","speed","straight","number","density","area","opacity","shape","type","size","min","max","animation","minimumValue","arrowAnimation","arrow","homeRef","el","strings","typed","typeSpeed","backSpeed","Typed","destroy","useTyped","className","styles","href","target","rel","onClick","e","window","location","preventDefault","document","getElementById","scrollIntoView","behavior"],"sourceRoot":""}